#!/bin/bash

# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.

if git rev-parse --verify HEAD >/dev/null 2>&1; then
	#echo "pre-commit check against HEAD"
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	#echo "pre-commit check against empty tree object"
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

###
# Redirect output to stderr.
###
exec 1>&2

###
# Check for non-ASCII file names
###
#echo -e "\tChecking for non-ASCII file names"
# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi


###
# Check for trailing whitespace
###
#echo -e "\tChecking for trailing whitespace"
# If there are whitespace errors, print the offending file names and fail.
diff_output=$(git diff-index --check --cached $against --)
if [ "${diff_output}" != "" ]; then
	exec git diff-index --check --cached $against --
	exit 1
fi


###
# Check for Python PEP8 compliance
###
#echo -e "\tValidating Python PEP8 compliance with Pylint"
pkg_dir=$(git rev-parse --show-toplevel)
python_files=$(git diff --name-only --cached *.py)
pep8_output=""
for file in ${python_files[@]}; do
	file_output=$(pylint --rcfile=${pkg_dir}/.pylintrc -r n ${file})
	if [ "${file_output}" != "" ]; then
		pep8_output=${pep8_output}"\n"${file_output}
	fi
done
if [ "${pep8_output}" != "" ]; then
	echo -e "${pep8_output}"
	exit 1
fi
#if [ "${python_files}" != "" ]; then
#	echo -e "All Python files are PEP8 compliant"
#fi


###
# Check for author congruence
###
#echo -e "\tValidating author name and email"
# Check that e-mail and name match the e-mail and address of first commit
check_email=1
first_commit_hash=$(git rev-list --max-parents=0 HEAD)
history_name=$(git log ${first_commit_hash} --format="%an" | head -n 1)
history_email=$(git log ${first_commit_hash} --format="%ae" | head -n 1)
current_name=$(git config --global user.name)
current_email=$(git config --global user.email)
if [ "${check_email}" == 1 ]; then
	if [ "${history_name}" != "${current_name}" ] || \
		[ "${history_email}" != "${current_email}" ]; then
		echo -e "Error: incongruent commit author information"
		echo -e "    Current is ${current_name} <${current_email}>"
		echo -e "    First is ${history_name} <${history_email}>"
		exit 1
	fi
fi

###
# Check for code "standard" compliance
###
files=$(git diff --name-only --cached)
pkg_dir=$(git rev-parse --show-toplevel)
if ! ${pkg_dir}/sbin/check_files_compliance.py -qstp "${files}"; then
	echo -e "Error: files do not comply with package code standard"
	exit 1
fi
