# appveyor.yml
# Copyright (c) 2013-2017 Pablo Acosta-Serafini
# See LICENSE for details

environment:
  matrix:
    - JOB: "2.6"
      INTERP: "py26"
      PYVER: "2.6"
    - JOB: "2.7"
      INTERP: "py27"
      PYVER: "2.7"
    - JOB: "3.3"
      INTERP: "py33"
      PYVER: "3.3"
    - JOB: "3.4"
      INTERP: "py34"
      PYVER: "3.4"
    - JOB: "3.5"
      INTERP: "py35"
      PYVER: "3.5"
    - JOB: "3.6"
      INTERP: "py36"
      PYVER: "3.6"

init:
  - echo "PYVER=%PYVER%"

#[[[cog
# import os
# with open(os.path.join('.', 'sbin', 'winsetup1.bat')) as fobj:
#     ilines = [item.rstrip() for item in fobj.readlines()]
# ignore = False
# for iline in ilines:
#     if (not ignore) and iline.strip().lower().startswith('rem [start ignore]'):
#         ignore = True
#     elif ignore and iline.strip().lower().startswith('rem [stop ignore]'):
#         ignore = False
#     elif ignore:
#         pass
#     elif iline.strip().lower().startswith('rem '):
#         cog.outl(iline.strip()[4:])
#     elif iline.strip():
#         cog.outl('- '+iline.strip())
#     else:
#         cog.outl()
#]]]
install:
###
# Set up environment variables
###
- set
- set PYTHONCMD=python
- set PIPCMD=pip
- set PYTESTCMD=py.test
- set REPO_DIR=%CD%
- for %%i in (%REPO_DIR%) do @echo %%~ni> pkg_name.txt
- set /p PKG_NAME=<pkg_name.txt
- set RESULTS_DIR=%REPO_DIR%\results
- set MAIN_REQUIREMENTS_FILE=%REPO_DIR%\requirements\main_%INTERP%.pip
- set TESTS_REQUIREMENTS_FILE=%REPO_DIR%\requirements\tests_%INTERP%.pip
- set DOCS_REQUIREMENTS_FILE=%REPO_DIR%\requirements\docs_%INTERP%.pip
- set CITMP=%REPO_DIR%\CITMP
- if not exist "%CITMP%" mkdir %CITMP%
- echo "INTERP=%INTERP%"
- echo "PKG_NAME=%PKG_NAME%"
- echo "PYTHONCMD=%PYTHONCMD%"
- echo "PIPCMD=%PIPCMD%"
- echo "PYTESTCMD=%PYTESTCMD%"
- echo "REPO_DIR=%REPO_DIR%"
- echo "RESULTS_DIR=%RESULTS_DIR%"
- echo "MAIN_REQUIREMENTS_FILE=%MAIN_REQUIREMENTS_FILE%"
- echo "TESTS_REQUIREMENTS_FILE=%TESTS_REQUIREMENTS_FILE%"
- echo "DOCS_REQUIREMENTS_FILE=%DOCS_REQUIREMENTS_FILE%"
- echo "CITMP=%CITMP%"
###
# Install tools and dependencies of package dependencies
###
- set PATH=C:\\Miniconda-x64;C:\\Miniconda-x64\\Scripts;%PATH%
- conda update -y conda
- conda create -y --name %INTERP% python=%PYVER%
- activate %INTERP%
- which python
#[[[end]]]

#[[[cog
# import os
# with open(os.path.join('.', 'sbin', 'winsetup2.bat')) as fobj:
#     ilines = [item.rstrip() for item in fobj.readlines()]
# ignore = False
# for iline in ilines:
#     if (not ignore) and iline.strip().lower().startswith('rem [start ignore]'):
#         ignore = True
#     elif ignore and iline.strip().lower().startswith('rem [stop ignore]'):
#         ignore = False
#     elif ignore:
#         pass
#     elif iline.strip().lower().startswith('rem '):
#         cog.outl(iline.strip()[4:])
#     elif iline.strip():
#         cog.outl('- '+iline.strip())
#     else:
#         cog.outl()
#]]]
- ps: wget https://bootstrap.pypa.io/get-pip.py -OutFile get-pip.py
- python get-pip.py
- pip install --upgrade pip wheel
- pip install --upgrade --ignore-installed setuptools
- which python
- which pip
- pip --version
- python -c "import os, pip; print(os.path.dirname(os.path.realpath(pip.__path__[0])))" > python_site_packages_dir.txt
- set /p PYTHON_SITE_PACKAGES=<python_site_packages_dir.txt
- set VIRTUALENV_DIR=C:\Miniconda-x64\envs\%INTERP%
- set BIN_DIR=%VIRTUALENV_DIR%\Scripts
- set SOURCE_DIR=%PYTHON_SITE_PACKAGES%\%PKG_NAME%
- set EXTRA_DIR=%VIRTUALENV_DIR%\share\%PKG_NAME%
- set SBIN_DIR=%EXTRA_DIR%\sbin
- set PYTHONPATH=%PYTHONPATH%;%PYTHON_SITE_PACKAGES%;%EXTRA_DIR%;%EXTRA_DIR%\tests;%EXTRA_DIR%\docs;%EXTRA_DIR%\docs\support
- set TRACER_DIR=%EXTRA_DIR%\docs\support
- set COV_FILE=%SOURCE_DIR%\.coveragerc_ci_%INTERP%
- echo "PYTHON_SITE_PACKAGES=%PYTHON_SITE_PACKAGES%"
- echo "VIRTUALENV_DIR=%VIRTUALENV_DIR%"
- echo "BIN_DIR=%BINDIR%"
- echo "SOURCE_DIR=%SOURCE_DIR%"
- echo "EXTRA_DIR=%EXTRA_DIR%"
- echo "SBIN_DIR=%SBIN_DIR%"
- echo "PYTHONPATH=%PYTHONPATH%"
- echo "TRACER_DIR=%TRACER_DIR%"
- echo "COV_FILE=%COV_FILE%"
###
# Install package dependencies
###
- set OLD_PTYHON_PATH=%PYTHONPATH%
- set PYTHONPATH=%REPO_DIR%;%REPO_DIR%\sbin;%PYTHONPATH%
- cd %REPO_DIR%
- python %REPO_DIR%\sbin\gen_req_files.py freeze
- pip install -r%MAIN_REQUIREMENTS_FILE%
- pip install -r%TESTS_REQUIREMENTS_FILE%
- pip install -r%DOCS_REQUIREMENTS_FILE%
- pip freeze
###
# Create directories for reports and artifacts
###
- if not exist "%RESULTS_DIR%\\testresults" mkdir %RESULTS_DIR%\testresults
- if not exist "%RESULTS_DIR%\\codecoverage" mkdir %RESULTS_DIR%\codecoverage
- if not exist "%RESULTS_DIR%\\artifacts" mkdir %RESULTS_DIR%\artifacts

build_script:
###
# Install package
###
- type %REPO_DIR%\MANIFEST.in
# Fix Git symbolik links
- python .\sbin\fix_windows_symlinks.py
- python setup.py sdist --formats=zip
- timeout /t 5
# Change directory away from repository, otherwise pip does not install package
- set PYTHONPATH=%OLD_PTYHON_PATH%
- python -c "import os, sys; sys.path.append(os.path.realpath('./'+os.environ['PKG_NAME']));import version; print(version.__version__)" > version.txt
- set /p PKG_VERSION=<version.txt
- echo "PKG_VERSION=%PKG_VERSION%"
- cd %PYTHON_SITE_PACKAGES%
- pip install --upgrade %REPO_DIR%\dist\%PKG_NAME%-%PKG_VERSION%.zip

###
# sbin/wintest.bat file
###
# Write coverage configuration file
###
- python %SBIN_DIR%\coveragerc_manager.py 'ci' 1 %INTERP% %PYTHON_SITE_PACKAGES%
- type %COV_FILE%
# - if "%INTERP%" == "py26" python %SBIN_DIR%\patch_pylint.py %PYTHON_SITE_PACKAGES%
###
# Change to tests sub-directory to mimic Tox conditions
###
- cd %EXTRA_DIR%\tests

test_script:
###
# Run tests
###
# Omitted tests are not Windows-specific and are handled by Travis-CI
- python %SBIN_DIR%\check_files_compliance.py -tps -d %SOURCE_DIR% -m %EXTRA_DIR%
# pylint 1.6.x appears to have a bug in Python 3.6 that is only going to be fixed with Pylint 2.0
- if not "%PYVER%"=="3.6" pylint --rcfile=%EXTRA_DIR%\.pylintrc -f colorized -r no %SOURCE_DIR%
- if not "%PYVER%"=="3.6" pylint --rcfile=%EXTRA_DIR%\.pylintrc -f colorized -r no %SBIN_DIR%
- if not "%PYVER%"=="3.6" pylint --rcfile=%EXTRA_DIR%\.pylintrc -f colorized -r no %EXTRA_DIR%\tests
- if not "%PYVER%"=="3.6" pylint --rcfile=%EXTRA_DIR%\.pylintrc -f colorized -r no %EXTRA_DIR%\docs\support
- set DODOCTEST=1
- py.test --collect-only --doctest-glob="*.rst" %EXTRA_DIR%\docs > doctest.log 2>&1 || set DODOCTEST=0
- if %DODOCTEST%==1 py.test --doctest-glob="*.rst" %EXTRA_DIR%\docs
- py.test --doctest-modules %SOURCE_DIR%
# Coverage tests runs all the unit tests, no need to run the non-coverage
# tests since the report is not being used
# - py.test -s -vv --junitxml=%RESULTS_DIR%\testresults\pytest.xml
- py.test --cov-config %COV_FILE% --cov %SOURCE_DIR% --cov-report term
# Re-building exceptions auto-documentation takes a long time in Appveyor.
# They have (and should be) spot-checked every now and then
# - python %SBIN_DIR%\build_docs.py -r -t -d %SOURCE_DIR%
#[[[end]]]
